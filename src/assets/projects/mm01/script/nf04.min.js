/*
Copyright (c) 2017 Clément de La Bourdonnaye

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var NF4={};(function(){function extractStrings(code){var strings={};var index=0;var stringsCode=[];if(!code)return{code:[],strings:[]}
code=code.map((line)=>line.replace(/"([^"\\\r\n]*(?:\\.[^"\\\r\n]*)*)"/g,(match,content)=>{strings["____str"+index]=content;return"____str"+index++}).replace(/'(?:(\\.{1})|([^']{1}))'/g,(match,content)=>{return eval(match).charCodeAt(0)}));for(var name in strings){stringsCode.push(`var ${name}=\"${strings[name]}\"`)}
return{code:code,strings:stringsCode}}
function translateExpression(expression,variables){var changed;expression=expression.replace(/\[/g,"{").replace(/\]/g,"}")
do{changed=!1;expression=expression.replace(/([a-zA-Z0-9éàè_]+){([^{}]+)}/gi,(match,name,content)=>{changed=!0;return `${name}[${content} - ${variables[name].offset}]`})}while(changed);return expression.replace(/\s+ET\s+/gi,"&&").replace(/\s+OU\s+/gi,"||").replace(/([^<>!]{1})(={1})|(={3,})/g,"$1==").replace(/Lire\(.*?\)/gi,(match,args)=>{throw "on sait pas quoi lire"})}
function translate(code,variables){return code.map((line)=>{if(line.indexOf("<-")!=-1){line=line.split("<-");return translateExpression(line[0],variables)+"="+translateExpression(line[1],variables)}else if(line.startsWith("Pour")){return line.replace(/^Pour\s+(.+?)\s+de\s+(.+?)\s+à\s+(.+?)(?:\s+par\s+pas\s+de\s+(.+?))?$/i,(match,varName,start,end,step)=>{return `for(${varName}=${start};${varName}<${end};${varName}+=${step || 1}) {`})}else if(line.startsWith("Tant que")){return line.replace(/^Tant\s+que\s+(.+?)(?:\s+faire)?$/i,(match,condition)=>{return `while(${translateExpression(condition, variables)}) {`})}else if(line.startsWith("Si")){return line.replace(/^Si\s+(.+?)(?:\s+alors)?$/i,(match,condition)=>{return `if(${translateExpression(condition, variables)}) {`})}
var changed=!1;line=line.replace(/^([a-zA-Z0-9éàè_]+)\s*\((.+)?!([^\)]*?)\)$/,(match,name,args,outputs)=>{changed=!0;if(name=="Lire"){return `${outputs ? (outputs + "=") : ""}yield '${getType(outputs, variables)}';`}else{args=(args||"").split(",").map(a=>translateExpression(a,variables));if(name=="Ecrire"){args=args.map((arg)=>{if(getType(arg,variables)=="caractère"){return `String.fromCharCode(${arg})`}
return arg})}
args=args.join(",");return `${outputs ? (outputs + "=") : ""}${name}(${args})`}});return changed?line:line.replace(/(Fin\s*Si)|(Fin\s*tq)|(Fin\s*Pour)|(Fin tant que)/gi,"}")})}
function translateTypes(content){let types={};let match;let result;if(!content){return{types:{},code:[]}}
content=content.map((line)=>{match=line.trim().match(/^([a-zA-Z0-9éàè_]+)\s*:\s*article\s*\((.+?)\)$/i);if(match){result=translateVariables(match[2].split(","),types,"this.");types[match[1]]=result.variables;return `var ${match[1]} = function() {${result.code.join(';\n')}}`}
console.error("expression not recognized",line)});return{types:types,code:content}}
function translateVariables(header,types,rel="var "){let variables={};if(!header){return{variables:{},code:[]}}
return{code:header.map((line)=>{line=line.trim().match(/^([a-zA-Z0-9éàè_]+?)\s*:\s*(?:tableau\[(.+?)\]\s*de\s*)?([a-zA-Z0-9éàè_]+?)$/);if(!line)return"";var name=line[1];var type=line[3];var dimension=line[2]?line[2].split(","):0;if(types[type]){type=types[type]}
variables[name]={type:type,dim:dimension.length}
if(!dimension){if(typeof type=="object"){return rel+name+"= new "+line[3]+"()"}
return rel+name}else{dimension=dimension.map((el)=>{el=el.split(".").filter((a)=>a!="").map(parseFloat);variables[name].offset=el[0];return el[1]-el[0]+1});var content=`${rel}${name} = new Array(${dimension.shift()}).fill(-1)`;end="";dimension.forEach((dim)=>{content+=`.map(e=>new Array(${dim}).fill(-1)`
end+="))"});if(typeof type=="object"){content+=".map(e => new "+line[3]+"()"+")"}
return content+end}}),variables:variables}}
function getType(expression,variables){var modified=!1;var type=null;do{modified=!1;expression=expression.replace(/\[[^\[]+?\]/,(match)=>{modified=!0;return""})}while(modified);expression=expression.trim().split(".");type=variables[expression.shift()];expression.forEach((subtype)=>{type=type.type[subtype]});return type?type.type||type:null}
function clean(code){if(!code)return[];return code.split("\n").map((line)=>line.trim().replace(/\/\/(.*)$/g,"")).filter(line=>line!="")}
function split(code){let algorithms=code.split(/(?=(sous(-)?)?algorithme)/i);algorithms=algorithms.map((algo)=>algo.split(/(?=((sous(-)?)?algorithme)|pe:|ps:|types|variables|instructions)/gi).map(clean));algorithms=algorithms.map((algo)=>{parts={};algo.forEach((content)=>{var key=content.shift();if(key){if(key.match(/^algorithme/i)){parts.name=key.split(/algorithme/i,2).pop().trim()}else if(key.match(/^(sous(-)?)algorithme/)){parts.name=key.split(/algorithme/i,2).pop().trim();parts.func=!0}else{parts[key.toLowerCase()]=content}}});return parts});return algorithms}
NF4.compile=function(code){var algorithms=split(code);var main;var functions=[];algorithms.forEach((algo)=>{var instructions=extractStrings(algo.instructions);var types=translateTypes(algo.types);var variables=translateVariables(algo.variables,types.types);var code=[].concat(types.code,instructions.strings,variables.code,translate(instructions.code,variables.variables));if(algo.func){functions.push([`var ${algo.name} = () => {`].concat(code,"}"))}else{main=code}});return functions.reduce((total,current)=>total+current.join(";\n"),"")+";\n"+main.join(";\n")}
function createIterator(code,writeFnc){var clavier="CLAVIER :)";var Ecrire=(...content)=>{writeFnc(content.join(" "))};return eval("(function* () {"+code+"})()")}
NF4.run=function(code,writeFnc,errorCallback){var buffer="";var wasChar=!1;var iterator;var reading=!1;var terminated=!1;var waiting=!1;var feed=(ignoreBuffer=!1)=>{var response,match,data=!1;if((!ignoreBuffer&&buffer.length==0)||terminated){waiting=!0;return}
waiting=!1;if(reading=="entier"){match=buffer.match(/^([\0\s]*([0-9]+)[\0\s]*)/);if(!match){if(buffer.match(/^[\s\0]*$/)){waiting=!0;return}
throw "mauvaise entrée";return}
data=parseFloat(match[2]);buffer=buffer.substring(match[1].length)}else if(reading=="caractère"){data=buffer.charCodeAt(0);buffer=buffer.substring(1)}else if(reading=="réel"){match=buffer.match(/^([\0\s]*([0-9]+(?:.[0-9]+)?)[\0\s]*)/);if(!match){if(buffer.match(/^\s*$/)){waiting=!0;return}
throw "mauvaise entrée";return}
data=parseFloat(match[2]);buffer=buffer.substring(match[1].length)}
response=iterator.next(data);if(response.done){terminated=!0;console.log("terminated")}else{reading=response.value;feed()}}
try{iterator=createIterator(code,writeFnc);feed(!0)}catch(err){errorCallback(err)}
return(data)=>{buffer+=data;if(waiting){feed()}}}})()